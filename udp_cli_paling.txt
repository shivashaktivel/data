#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 54321
#define MAX_BUFFER_SIZE 1024

int main() {
    int sockfd;
    struct sockaddr_in serverAddr;
    char buffer[MAX_BUFFER_SIZE];
    char response[MAX_BUFFER_SIZE];
    ssize_t dataSize;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Error in socket");
        exit(1);
    }

    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    printf("Enter the number of commands to be executed: ");
    int numCommands;
    scanf("%d", &numCommands);
    getchar(); // Consume newline

    for (int i = 0; i < numCommands; i++) {
        printf("Enter a command (PALINDROME, EVENODD, NUM01): ");
        fgets(buffer, MAX_BUFFER_SIZE, stdin);

        // Remove newline from the input string
        size_t len = strlen(buffer);
        if (len > 0 && buffer[len - 1] == '\n') {
            buffer[len - 1] = '\0';
        }

        sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr *)&serverAddr, sizeof(serverAddr));

        dataSize = recvfrom(sockfd, response, MAX_BUFFER_SIZE, 0, NULL, NULL);
        response[dataSize] = '\0';

        if (strncmp(buffer, "PALINDROME", 10) == 0) {
            printf("Server Response: %s\n", response);
            if (strncmp(response, "Enter a word", 12) == 0) {
                printf("Enter a word: ");
                fgets(buffer, MAX_BUFFER_SIZE, stdin);
                // Remove newline from the input string
                len = strlen(buffer);
                if (len > 0 && buffer[len - 1] == '\n') {
                    buffer[len - 1] = '\0';
                }
                sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr *)&serverAddr, sizeof(serverAddr));
                dataSize = recvfrom(sockfd, response, MAX_BUFFER_SIZE, 0, NULL, NULL);
                response[dataSize] = '\0';
                printf("Server Response: %s\n", response);
            }
        } else if (strncmp(buffer, "EVENODD", 7) == 0) {
            printf("Server Response: %s\n", response);
            if (strncmp(response, "Enter a number", 14) == 0) {
                printf("Enter a number: ");
                fgets(buffer, MAX_BUFFER_SIZE, stdin);
                // Remove newline from the input string
                len = strlen(buffer);
                if (len > 0 && buffer[len - 1] == '\n') {
                    buffer[len - 1] = '\0';
                }
                sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr *)&serverAddr, sizeof(serverAddr));
                dataSize = recvfrom(sockfd, response, MAX_BUFFER_SIZE, 0, NULL, NULL);
                response[dataSize] = '\0';
                printf("Server Response: %s\n", response);
            }
        } else if (strncmp(buffer, "NUM01", 5) == 0) {
            printf("Server Response: %s\n", response);
            if (strncmp(response, "Enter a string", 14) == 0) {
                printf("Enter a string: ");
                fgets(buffer, MAX_BUFFER_SIZE, stdin);
                // Remove newline from the input string
                len = strlen(buffer);
                if (len > 0 && buffer[len - 1] == '\n') {
                    buffer[len - 1] = '\0';
                }
                sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr *)&serverAddr, sizeof(serverAddr));
                dataSize = recvfrom(sockfd, response, MAX_BUFFER_SIZE, 0, NULL, NULL);
                response[dataSize] = '\0';
                printf("Server Response: %s\n", response);
            }
        }
    }

    close(sockfd);
    return 0;
}